{"version":3,"sources":["pages/Config.js","components/Header.js","pages/Feedback.js","redux/actions/index.js","redux/actions/playerAction.js","pages/Game.js","pages/Login.js","pages/Ranking.js","App.js","redux/reducers/playerReducer.js","redux/reducers/tokenReducer.js","redux/reducers/index.js","redux/store/index.js","serviceWorker.js","index.js"],"names":["Config","data-testid","Component","Header","this","props","name","email","score","timer","className","alt","src","md5","toString","defaultProps","connect","state","player","gravatarEmail","Feedback","handleRouteBtnClick","history","push","newUser","picture","rankingList","JSON","parse","localStorage","getItem","setItem","stringify","assertion","type","onClick","assertions","fetchToken","dispatch","a","fetch","response","json","data","token","error","namePlayer","Game","countDown","timeOut","handleSelectAnswer","answer","setScore","setAssertion","correctAnswer","results","index","correct_answer","document","querySelectorAll","forEach","item","classList","add","clearInterval","setState","isNextDisabled","areAnswersDisabled","calculateScore","handleNextQuestion","clearTimeout","length","countdown","createInterval","createTimeout","requestQuestions","result","questionsList","map","question","answers","incorrect_answers","sort","Math","random","setInterval","prevState","setTimeout","multiplier","difficulty","renderQuestions","category","incorrectAnswer","he","decode","key","disabled","indexOf","getToken","response_code","scorePlayer","hit","assertionPlayer","Login","validateButton","isEmailValid","test","isButtonDisabled","handleChange","target","value","handleClickSubmit","event","dispatchPlayer","preventDefault","handleSettingsBtnClick","placeholder","onChange","maxLength","required","id","gravatar","Ranking","ranking","b","user","App","path","component","exact","INITIAL_STATE","playerReducer","action","tokenReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d954be03.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Config extends Component {\n  render() {\n    return (\n      <div>\n        <h1 data-testid=\"settings-title\">Configurações </h1>\n      </div>\n    );\n  }\n}\n\nexport default Config;\n","import md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../styles/Header.css';\n\nclass Header extends Component {\n  render() {\n    const { name, email, score, timer } = this.props;\n    return (\n      <header>\n        <div className=\"header-player\">\n          <img\n            data-testid=\"header-profile-picture\"\n            className=\"img-gravatar\"\n            alt=\"avatar\"\n            src={ `https://www.gravatar.com/avatar/${md5(email).toString()}` }\n          />\n          <div className=\"player-info\">\n            <h1 data-testid=\"header-player-name\" className=\"name\">{`Player: ${name}`}</h1>\n            <h2 data-testid=\"header-score\" className=\"score\">{`Score: ${score}`}</h2>\n          </div>\n        </div>\n        {timer > 0 && <p className=\"timer\">{timer}</p>}\n        <div className=\"header-logo\">\n          <img src=\"./neon.svg\" alt=\"\" />\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  email: state.player.gravatarEmail,\n  score: state.player.score,\n});\n\nHeader.defaultProps = {\n  name: '',\n  email: '',\n  score: 0,\n  timer: 0,\n};\n\nHeader.propTypes = {\n  name: PropTypes.string,\n  email: PropTypes.string,\n  score: PropTypes.number,\n  timer: PropTypes.number,\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","import md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FaListOl, FaPlay } from 'react-icons/fa';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport '../styles/Feedback.css';\n\nclass Feedback extends Component {\n  componentDidMount() {\n    const { player: { name, score, gravatarEmail } } = this.props;\n    if (!name) return;\n    const picture = `https://www.gravatar.com/avatar/${md5(gravatarEmail).toString()}`;\n    const newUser = {\n      name,\n      score,\n      picture,\n    };\n    const rankingList = JSON.parse(localStorage.getItem('ranking')) || [];\n    localStorage.setItem('ranking', JSON.stringify([...rankingList, newUser]));\n  }\n\n  handleRouteBtnClick = () => {\n    const { history } = this.props;\n    history.push('/');\n  }\n\n  render() {\n    const { assertion, score, history } = this.props;\n    const hit = 3;\n    return (\n      <>\n        <Header />\n        <div className=\"feedback-container\">\n          {\n            assertion >= hit\n              ? (\n                <p data-testid=\"feedback-text\" className=\"feedback-text\">\n                  Well Done!\n                </p>\n              )\n              : (\n                <p data-testid=\"feedback-text\" className=\"feedback-text\">\n                  Could be better...\n                </p>\n              )\n          }\n          <p\n            data-testid=\"feedback-total-score\"\n            className=\"feedback-data\"\n          >\n            {`Score: ${score}`}\n\n          </p>\n          <p\n            data-testid=\"feedback-total-question\"\n            className=\"feedback-data\"\n          >\n            {`Assertions: ${assertion}`}\n\n          </p>\n          <div className=\"feedback-btns\">\n            <button\n              data-testid=\"btn-play-again\"\n              className=\"play-again-btn\"\n              type=\"button\"\n              onClick={ this.handleRouteBtnClick }\n            >\n              <FaPlay />\n              Play Again\n              <span />\n            </button>\n            <button\n              data-testid=\"btn-ranking\"\n              className=\"ranking-btn\"\n              type=\"button\"\n              onClick={ () => history.push('/ranking') }\n            >\n              <FaListOl />\n              Ranking\n              <span />\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  assertion: state.player.assertions,\n  player: state.player,\n  score: state.player.score,\n});\n\nFeedback.propTypes = {\n  assertion: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  player: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default connect(mapStateToProps)(Feedback);\n","export const GET_TOKEN = 'GET_TOKEN';\n\nconst requestToken = (token) => ({ type: GET_TOKEN, token });\nconst failRequest = (error) => ({ type: 'FAIL', error });\n\nexport const fetchToken = () => async (dispatch) => {\n  try {\n    const response = await fetch('https://opentdb.com/api_token.php?command=request');\n    const data = await response.json();\n    dispatch(requestToken(data.token));\n  } catch (error) {\n    dispatch(failRequest(error));\n  }\n};\n","const namePlayer = (name, gravatarEmail) => ({ type:\n  'SET_PLAYER_DATA',\nname,\ngravatarEmail });\n\nexport const scorePlayer = (score) => ({ type: 'SET_PLAYER_SCORE', score });\n\nexport const assertionPlayer = (hit) => ({ type: 'SET_PLAYER_ASSERTION', hit });\n\nexport default namePlayer;\n","import he from 'he';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { fetchToken } from '../redux/actions';\nimport { assertionPlayer, scorePlayer } from '../redux/actions/playerAction';\nimport '../styles/Game.css';\n\nclass Game extends Component {\n  countDown = 0;\n\n  timeOut = 0;\n\n  constructor() {\n    super();\n    this.state = {\n      results: [],\n      index: 0,\n      countdown: 30,\n      areAnswersDisabled: false,\n      isNextDisabled: true,\n    };\n  }\n\n  async componentDidMount() {\n    const { getToken } = this.props;\n    // const millisToThirtySeconds = 30000;\n    const result = await this.requestQuestions();\n    const requestFailed = 3;\n    if (result.response_code === requestFailed) {\n      await getToken();\n      this.requestQuestions();\n    }\n    this.countDown = this.createInterval();\n    this.timeOut = this.createTimeout();\n  }\n\n  handleSelectAnswer = (answer) => {\n    const { setScore, setAssertion } = this.props;\n    const { results, index } = this.state;\n    const { correct_answer: correctAnswer } = results[index];\n    document.querySelectorAll('.answer').forEach((item) => {\n      item.classList.add('clicked');\n    });\n    clearInterval(this.countDown);\n    this.setState({\n      isNextDisabled: false,\n      areAnswersDisabled: true,\n    });\n\n    if (answer === correctAnswer) { setAssertion(1); }\n\n    return (answer === correctAnswer)\n      ? setScore(this.calculateScore())\n      : setScore(0);\n  }\n\n  handleNextQuestion = () => {\n    const { index, results } = this.state;\n    const { history } = this.props;\n\n    clearInterval(this.countDown);\n    clearTimeout(this.timeOut);\n    if (index === results.length - 1) {\n      history.push('/feedback');\n      return;\n    }\n    this.setState({\n      index: index + 1,\n      areAnswersDisabled: false,\n      isNextDisabled: true,\n      countdown: 30,\n    });\n    this.countDown = this.createInterval();\n    this.timeOut = this.createTimeout();\n  }\n\n  requestQuestions = async () => {\n    const { token } = this.props;\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const result = await response.json();\n    const half = 0.5;\n    const questionsList = result.results.map((question) => (\n      {\n        ...question,\n        answers: [...question.incorrect_answers, question.correct_answer]\n          .sort(() => Math.random() - half),\n      }\n    ));\n    this.setState({ results: questionsList });\n    return result;\n  }\n\n  createInterval = () => {\n    const millisToSecond = 1000;\n    return setInterval(() => {\n      const { countdown } = this.state;\n      if (countdown === 1) clearInterval(this.countDown);\n      this.setState((prevState) => ({ countdown: prevState.countdown - 1 }));\n    }, millisToSecond);\n  }\n\n  createTimeout = () => {\n    const millisToThirtySeconds = 30000;\n    return setTimeout(() => {\n      this.setState({\n        areAnswersDisabled: true,\n        isNextDisabled: false,\n      });\n    }, millisToThirtySeconds);\n  }\n\n  calculateScore = () => {\n    const { results, index, countdown } = this.state;\n    let multiplier = 1;\n    const hardMultiplier = 3;\n    const mediumMultiplier = 2;\n    const basePoints = 10;\n\n    if (results[index].difficulty === 'hard') multiplier = hardMultiplier;\n    if (results[index].difficulty === 'medium') multiplier = mediumMultiplier;\n\n    return (basePoints + (countdown * multiplier));\n  };\n\n  renderQuestions = () => {\n    const { results, index, areAnswersDisabled, isNextDisabled } = this.state;\n    const { category, question,\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswer, answers } = results[index];\n\n    return (\n      <div className=\"game-container\">\n        <h2 data-testid=\"question-category\">{category}</h2>\n        <p data-testid=\"question-text\">{he.decode(question)}</p>\n        <div data-testid=\"answer-options\" className=\"answers-list\">\n          {answers.map((answer) => (\n            <button\n              type=\"button\"\n              key={ answer }\n              disabled={ areAnswersDisabled }\n              onClick={ () => this.handleSelectAnswer(answer) }\n              className={ answer === correctAnswer\n                ? 'answer correct'\n                : 'answer wrong' }\n              data-testid={ answer === correctAnswer\n                ? 'correct-answer'\n                : `wrong-answer-${incorrectAnswer.indexOf(answer)}` }\n            >\n              {he.decode(answer)}\n            </button>\n          ))}\n        </div>\n        {/* <br /> */}\n        {\n          !isNextDisabled && (\n            <button\n              type=\"button\"\n              data-testid=\"btn-next\"\n              className=\"btn-next\"\n              onClick={ this.handleNextQuestion }\n            >\n              Next\n            </button>\n          )\n        }\n      </div>\n    );\n  };\n\n  render() {\n    const { results, countdown } = this.state;\n\n    return (\n      <div>\n        <Header timer={ countdown } />\n        {results.length\n          ? this.renderQuestions()\n          : ''}\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  token: PropTypes.string.isRequired,\n  getToken: PropTypes.func.isRequired,\n  setScore: PropTypes.func.isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  setAssertion: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: () => dispatch(fetchToken()),\n  setScore: (score) => dispatch(scorePlayer(score)),\n  setAssertion: (hit) => dispatch(assertionPlayer(hit)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FaPlay } from 'react-icons/fa';\nimport { FiSettings } from 'react-icons/fi';\nimport { connect } from 'react-redux';\nimport { fetchToken } from '../redux/actions';\nimport namePlayer from '../redux/actions/playerAction';\nimport '../styles/Login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n      isButtonDisabled: true,\n    };\n  }\n\n  validateButton = () => {\n    const { name, email } = this.state;\n    const regexEmail = /[a-zA-Z0-9._]+@[a-zA-Z]+\\.[a-zA-Z.]*\\w$/;\n    const isEmailValid = regexEmail.test(email);\n    this.setState({ isButtonDisabled: !((isEmailValid && name)) });\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, this.validateButton);\n  }\n\n  handleClickSubmit = async (event) => {\n    const { getToken, history, dispatchPlayer } = this.props;\n    const { email, name } = this.state;\n    event.preventDefault();\n    await getToken();\n    dispatchPlayer(name, email);\n    history.push('/play');\n  }\n\n  handleSettingsBtnClick = () => {\n    const { history } = this.props;\n    history.push('/config');\n  }\n\n  render() {\n    const { name, email, isButtonDisabled } = this.state;\n    return (\n      <main className=\"login-main\">\n        <form>\n          <img className=\"blink\" src=\"./neon.svg\" alt=\"\" />\n          <h1>Login</h1>\n          <input\n            type=\"text\"\n            placeholder=\"Nome\"\n            name=\"name\"\n            value={ name }\n            data-testid=\"input-player-name\"\n            onChange={ this.handleChange }\n            maxLength=\"30\"\n            required\n          />\n          <input\n            type=\"email\"\n            placeholder=\"E-mail\"\n            name=\"email\"\n            value={ email }\n            data-testid=\"input-gravatar-email\"\n            onChange={ this.handleChange }\n            maxLength=\"30\"\n            required\n          />\n          <div className=\"buttons-container\">\n            <button\n              className={ isButtonDisabled ? 'play-btn-disable' : 'play-btn-able' }\n              type=\"submit\"\n              data-testid=\"btn-play\"\n              disabled={ isButtonDisabled }\n              onClick={ this.handleClickSubmit }\n            >\n              <FaPlay className=\"icon\" />\n            </button>\n            <button\n              className=\"settings-btn\"\n              type=\"button\"\n              data-testid=\"btn-settings\"\n              id=\"setting\"\n              onClick={ this.handleSettingsBtnClick }\n            >\n              <FiSettings className=\"icon\" />\n            </button>\n          </div>\n          {/* <button\n            className={ isButtonDisabled ? 'play-btn-disable' : 'play-btn-able' }\n            type=\"submit\"\n            data-testid=\"btn-play\"\n            disabled={ isButtonDisabled }\n            onClick={ this.handleClickSubmit }\n          >\n            <FaPlay className=\"icon\" />\n            PLAY\n          </button>\n          <button\n            className=\"settings-btn\"\n            type=\"button\"\n            data-testid=\"btn-settings\"\n            id=\"setting\"\n            onClick={ this.handleSettingsBtnClick }\n          >\n            <FiSettings className=\"icon\" />\n            SETTINGS\n          </button> */}\n        </form>\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: () => dispatch(fetchToken()),\n  dispatchPlayer: (name, gravatar) => dispatch(namePlayer(name, gravatar)),\n});\n\nLogin.propTypes = {\n  getToken: PropTypes.func.isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatchPlayer: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FaPlay } from 'react-icons/fa';\nimport '../styles/Ranking.css';\n\nclass Ranking extends Component {\n  ranking = JSON.parse(localStorage.getItem('ranking')) || [];\n\n  render() {\n    const { history } = this.props;\n    return (\n      <div className=\"ranking-container\">\n        <div className=\"ranking-header\">\n          <img src=\"./neon.svg\" alt=\"\" />\n          <h1 data-testid=\"ranking-title\">Ranking</h1>\n        </div>\n        {this.ranking.sort((a, b) => b.score - a.score).map((user, index) => (\n          <div className=\"ranking-card\" key={ index }>\n            <div className=\"ranking-user\">\n              <img src={ user.picture } alt=\"\" className=\"img-gravatar\" />\n              <h4\n                data-testid={ `player-name-${index}` }\n                className=\"ranking-name\"\n              >\n                { user.name }\n              </h4>\n            </div>\n            <p\n              data-testid={ `player-score-${index}` }\n              className=\"ranking-score\"\n            >\n              { user.score }\n            </p>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ () => history.push('/') }\n          className=\"play-again-btn\"\n        >\n          <FaPlay />\n          Play\n        </button>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default Ranking;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Config from './pages/Config';\nimport Feedback from './pages/Feedback';\nimport Game from './pages/Game';\nimport Login from './pages/Login';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={ Login } exact />\n      <Route path=\"/play\" component={ Game } />\n      <Route path=\"/config\" component={ Config } />\n      <Route path=\"/ranking\" component={ Ranking } />\n      <Route path=\"/feedback\" component={ Feedback } />\n      <Route path=\"/ranking\" component={ Ranking } />\n    </Switch>\n  );\n}\n","const INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nconst playerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'SET_PLAYER_DATA':\n    return {\n      ...state,\n      name: action.name,\n      gravatarEmail: action.gravatarEmail,\n      score: 0,\n    };\n  case 'SET_PLAYER_SCORE':\n    return {\n      ...state,\n      score: state.score + action.score,\n    };\n  case 'SET_PLAYER_ASSERTION':\n    return {\n      ...state,\n      assertions: state.assertions + action.hit,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default playerReducer;\n","import { GET_TOKEN } from '../actions';\n\nconst initialState = '';\n\nconst tokenReducer = (state = initialState, action) => {\n  switch (action.type) {\n  case GET_TOKEN:\n    return action.token;\n  default:\n    return state;\n  }\n};\n\nexport default tokenReducer;\n","import { combineReducers } from 'redux';\nimport player from './playerReducer';\nimport token from './tokenReducer';\n\nconst rootReducer = combineReducers({ player, token });\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport store from './redux/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}